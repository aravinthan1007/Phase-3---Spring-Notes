Event Listner:Independently monitoring the messsaging pipeline 
Example :Ebay or stocks winners get the get the stock based on the buy or sell 
Code :
Step 1: create the Event listner class 
step 2: anotate the class with eventlistner 
step 3: get back to the main code and application context with the object creation 
step 4: run the code 

Event listnercode :

package com.simplilearn.springboot.events;
import org.springframework.context.event.ContextStartedEvent;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
@Component
public class AnnotationDrivenContextStartedListener {
    // @Async
    @EventListener
    public void handleContextStart(ContextStartedEvent cse) //ContextStartedEvent has the message of the source{
        System.out.println("Handling context started event.")

}
}

Main Page Code :

public springboot Application {

public static void main (String [] args) {
ConfigurableApplicationContext configurableApplicationContext = SpringApplication.run(SpringBootDemoApplication.class, args);

ContextStartedEvent cse = new ContextStartedEvent(configurableApplicationContext);
        configurableApplicationContext.getBean(AnnotationDrivenContextStartedListener.class).handleContextStart(cse)
        }
        }
        
Custom Event Listner:

Listing the Custom message 

code :
Step 1: create the class with the customeevent extend the applicationevent 
step 2: create the object string message 
step 3: create the constructor with the object source and message ,with return message for the constructor 

package com.simplilearn.springboot.events;
import org.springframework.context.ApplicationEvent;
public class CustomSpringEvent extends ApplicationEvent {
    private static final long serialVersionUID = 4882925673311956478L;
    private String message;
 
    public CustomSpringEvent(Object source, String message) {
        super(source);
        this.message = message;
    }
    public String getMessage() {
        return message;
        
        }
        }
        
Main Code : Below line needs to be added 
configurableApplicationContext.getBean(CustomSpringEventPublisher.class).doStuffAndPublishAnEvent("Hello World");

Spring JDBC :Purpose : no need to read the query , return the query based on the java object 
Advantage ; 
1.provide automatic clean up resource 
2.converst JDBC SQL onto run time exception 
3. provide fexible to programer 

Code procedure:

1.create the mavenb project with springboot 
2.go to the main, resources create the application properties

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url = jdbc:mysql://localhost:3306/demo?allowPublicKeyRetrieval=true&useSSL=false
spring.datasource.username = sumitjui
spring.datasource.password = 
## Hibernate Properties
#The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
logging.level.org.hibernate.stat=debug
# Show all queries
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type = trace


3.Add the required dependency 
Maven Dependency code :
<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.5.RELEASE</version>
        <relativePath />
        <!-- lookup parent from repository -->
    </parent>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>//latest springboot web application starter 
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId> //used for update,delete etc CRED Activity 
            <artifactId>spring-boot-devtools</artifact>
            </scope>
            runtime</scope>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId> //used for test case 
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
4.create a pojo class in the package 
package com.simplilearn.spring_jdbc_demo;
public class Employee {
    
    private long id;
    private String firstName;
    private String lastName;
    private String emailId;
    
    public Employee() {
        
    }
    
    public Employee(long id, String firstName, String lastName, String emailId) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.emailId = emailId;
        
    }
    
    public long getId() {
        return id;
    }
    public void setId(long id) {
        this.id = id;
    }
    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    public String getEmailId() {
        return emailId;
    }
    public void setEmailId(String emailId)
    this.emailid= emailid;
    }
    }

5.create seprate package for JDBC Repository 
@repository
public class EmployeeJDBCRepository {
@Autowired
jdbcTemplate jdbcTemplate;
class EmployeeRowMapper implements RowMapper<Employee>{
employee employee = new employee();
employee.setid(rs.getlong("ID"));
employee.setFirstname(rs.getString("firstname"));
return employee;
}
}
public list<Employee> findAll(){
return jdbcTemplate.query("Select * from employees".new EmployeeRowMapper());
}
public optional<Employee>findbyID(long id){
return optional.of(jdbcTemplate.queryForObject("select * from employees where id =?" new object [] {
id
},new BeanPropertyRowMapper<Employee>(Employee.class)));
}
}
6.write the code for DAO 
7.Main Code 
package com.simplilearn.spring_jdbc_demo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class SpringBootJDBCApplication {
    
    private Logger logger = LoggerFactory.getLogger(this.getClass());
    
    @Autowired
    private EmployeeJDBCRepository employeeRepository;
    
    public void run(String...args) throws Exception{
        logger.info("Inserting -> {}", employeeRepository.insert(new Employee(10011L, "Ramesh", "Fadatare", "ramesh.gamil.com")));
        logger.info("Inserting -> {}", employeeRepository.insert(new Employee(10012L, "John", "Cena", "john@gmail.com")));
        logger.info("Inserting -> {}", employeeRepository.insert(new Employee(10013L, "tony", "stark", "stark@gmail.com")));
        logger.info("Employee id 10011 -> {}", employeeRepository.findbyID(10011L));
        logger.info("Update 10003 -> {}", employeeRepository.update(new Employee(10011L, "ram", "Stark", "ramesh123@gmail.com")));
        employeeRepository.deleteById(10013L);
        logger.info("All users -> {}", employeeRepository.findAll());
    }
    
    public static void main(String[] args) {
        SpringApplication.run(SpringBootJDBCApplication.class, args);
    }
}


Step 8 : update the tomcat port https://join.slack.com/t/webprojects-corp/shared_invite/zt-eqzmxgsj-97CI5A1IfPYTB66JFqrWBg



Spring MVC Architecture :
 Controller() to Model to View 
 
 Spring Boot:
 Spring Framework +Httpserver - xml 
 springboot is combination of spring framework and httpserver together , XML is removed due to difficult to debug 
 
 Create Basic spring sample Application :
 1. open the page https://start.spring.io/
 2. Add the required dependency 
 3.download the zip file and import to IDE 
 4.In application properties in resources -->
 Content is 
 Server port =8085//to change the port 
 Logging.level.root =Debug // view the logs of the application 
 
 Exception:
 
 Two types of Expection 
 1.Complile time Exception 
 2. Run time Exception 
 
 try catch and final is used if we know how to handle the Exception , Example file not found 
 throw is used when we don't know how to handle the Exception 
 
 @ControllerAdvice - Handle Exception in application level or parent Exception class
 @ExceptionHandler - Handle Exception in methods control , is child level Exception 
 
 




 



